//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.EvalServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EvalServiceReference.IEvalService")]
    public interface IEvalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/SubmitEval", ReplyAction="http://tempuri.org/IEvalService/SubmitEvalResponse")]
        void SubmitEval(EvalServiceLibrary.Eval eval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/SubmitEval", ReplyAction="http://tempuri.org/IEvalService/SubmitEvalResponse")]
        System.Threading.Tasks.Task SubmitEvalAsync(EvalServiceLibrary.Eval eval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetEval", ReplyAction="http://tempuri.org/IEvalService/GetEvalResponse")]
        EvalServiceLibrary.Eval GetEval(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetEval", ReplyAction="http://tempuri.org/IEvalService/GetEvalResponse")]
        System.Threading.Tasks.Task<EvalServiceLibrary.Eval> GetEvalAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetAllEvals", ReplyAction="http://tempuri.org/IEvalService/GetAllEvalsResponse")]
        System.Collections.Generic.List<EvalServiceLibrary.Eval> GetAllEvals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetAllEvals", ReplyAction="http://tempuri.org/IEvalService/GetAllEvalsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<EvalServiceLibrary.Eval>> GetAllEvalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetEvalBySubmitter", ReplyAction="http://tempuri.org/IEvalService/GetEvalBySubmitterResponse")]
        System.Collections.Generic.List<EvalServiceLibrary.Eval> GetEvalBySubmitter(string submitter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetEvalBySubmitter", ReplyAction="http://tempuri.org/IEvalService/GetEvalBySubmitterResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<EvalServiceLibrary.Eval>> GetEvalBySubmitterAsync(string submitter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/RemoveEval", ReplyAction="http://tempuri.org/IEvalService/RemoveEvalResponse")]
        void RemoveEval(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/RemoveEval", ReplyAction="http://tempuri.org/IEvalService/RemoveEvalResponse")]
        System.Threading.Tasks.Task RemoveEvalAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEvalServiceChannel : Client.EvalServiceReference.IEvalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EvalServiceClient : System.ServiceModel.ClientBase<Client.EvalServiceReference.IEvalService>, Client.EvalServiceReference.IEvalService {
        
        public EvalServiceClient() {
        }
        
        public EvalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EvalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EvalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EvalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SubmitEval(EvalServiceLibrary.Eval eval) {
            base.Channel.SubmitEval(eval);
        }
        
        public System.Threading.Tasks.Task SubmitEvalAsync(EvalServiceLibrary.Eval eval) {
            return base.Channel.SubmitEvalAsync(eval);
        }
        
        public EvalServiceLibrary.Eval GetEval(string id) {
            return base.Channel.GetEval(id);
        }
        
        public System.Threading.Tasks.Task<EvalServiceLibrary.Eval> GetEvalAsync(string id) {
            return base.Channel.GetEvalAsync(id);
        }
        
        public System.Collections.Generic.List<EvalServiceLibrary.Eval> GetAllEvals() {
            return base.Channel.GetAllEvals();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<EvalServiceLibrary.Eval>> GetAllEvalsAsync() {
            return base.Channel.GetAllEvalsAsync();
        }
        
        public System.Collections.Generic.List<EvalServiceLibrary.Eval> GetEvalBySubmitter(string submitter) {
            return base.Channel.GetEvalBySubmitter(submitter);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<EvalServiceLibrary.Eval>> GetEvalBySubmitterAsync(string submitter) {
            return base.Channel.GetEvalBySubmitterAsync(submitter);
        }
        
        public void RemoveEval(string id) {
            base.Channel.RemoveEval(id);
        }
        
        public System.Threading.Tasks.Task RemoveEvalAsync(string id) {
            return base.Channel.RemoveEvalAsync(id);
        }
    }
}
